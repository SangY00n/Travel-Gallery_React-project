{"version":3,"sources":["SimpleMap.js","GetMarkerMap.js","PostContent.js","image/sample.jpg","ReadContent.js","image/backButton.png","image/postButton.png","MapReadContent.js","EditContent.js","Clock.js","Login.js","BigPosting.js","App.js","reportWebVitals.js","index.js"],"names":["Marker","image","style","color","background","padding","display","textAlign","alignItems","justifyContent","borderRadius","transform","width","height","overflow","margin","SimpleMap","props","imageHandler","window","URL","wedkitURL","createObjectURL","state","center","lat","lng","zoom","imageSpace","imgURL","this","src","alt","objectFit","bootstrapURLKeys","key","process","defaultCenter","defaultZoom","Component","GetMarkerMap","handleApiLoaded","map","maps","position","bindTo","event","addListener","onMove","bind","yesIWantToUseGoogleMapApiInternals","onGoogleApiLoaded","PostContent","file","wtmX","wtmY","mapSpace","getMarkerMap","initialCenter","setState","cLat","cLng","makingMap","_wtmX","_wtmY","_image","type","onSubmit","e","preventDefault","curDate","Date","toLocaleString","postData","title","target","value","content","id","user","userId","posted_date","pw","userPw","console","log","alert","name","placeholder","accept","onChange","imageFile","files","reader","FileReader","onload","img","document","createElement","setAttribute","result","querySelector","appendChild","tags","EXIF","getData","exifLong","getAllTags","GPSLongitude","exifLat","GPSLatitude","exifLongRef","GPSLongitudeRef","exifLatRef","GPSLatitudeRef","latitude","longitude","readAsDataURL","ReadContent","cUserId","cUserPw","viewContent","_contents","contents","curColor","element","sample","num","backgroundColor","cursor","onClick","onClickOne","alignContent","flex","align","fontSize","float","className","onSetLogin","checkUser","onEdit","confirm","onDelete","transition","onMouseEnter","onMouseLeave","MapReadContent","markers","EditContent","initTitle","initTextarea","editedData","defaultValue","Clock","setCurTime","date","timerId","setInterval","clearInterval","curTime","toLocaleTimeString","Login","userData","onLogin","BigPosting","posting","undefined","App","mode","readMode","curNum","dataToEdit","bigPosting","bigColor","curMode","dataToDelete","deletedIndex","splice","index","dataToBig","nextNum","buttonImg","selectSpace","postButton","backButton","paddingRight","paddingTop","userHandler","paddingBottom","modeHandler","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.67923686.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport GoogleMapReact from 'google-map-react';\n\nconst Marker = ({ image }) => <div style={{\n  color: 'white',\n  background: 'black',\n  padding: '15px 15px',\n  display: 'inline-flex',\n  textAlign: 'center',\n  alignItems: 'center',\n  justifyContent: 'center',\n  // borderRadius: '100%',\n  borderRadius: '20%',\n  transform: 'translate(-50%, -50%)',\n\n  width: '50px',\n  height: '50px',\n  overflow: 'hidden',\n  margin: '0 auto',\n}}>{image}</div>;\n// const handleApiLoaded = (map, maps) => {\n//   // use map and maps objects\n// };\n\nclass SimpleMap extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      center: {\n        lat: this.props.lat,\n        lng: this.props.lng,\n      },\n      zoom: this.props.zoom,\n    }\n  }\n\n  imageHandler = (image) => {\n    var URL = window.URL || window.wedkitURL;\n    var imgURL = null;\n\n    imgURL = URL.createObjectURL(image);\n\n    return imgURL;\n  }\n\n  render() {\n\n    var URL = window.URL || window.wedkitURL;\n    var imageSpace = \"\";\n    var imgURL = null;\n    imgURL = URL.createObjectURL(this.props.image);\n    imageSpace = <img src={imgURL} alt=\"게시물 이미지\" style={{\n      width: '100%',\n      height: '100%',\n      objectFit: 'cover',\n    }} />\n\n    return (\n      // Important! Always set the container height explicitly\n      <GoogleMapReact\n        bootstrapURLKeys={{ key: process.env.REACT_APP_API_KEY }}\n        defaultCenter={this.state.center}\n        defaultZoom={this.state.zoom}\n      // yesIWantToUseGoogleMapApiInternals={true}\n      // onGoogleApiLoaded={({ map, maps }) => handleApiLoaded(map, maps)}\n      >\n        <Marker\n          lat={this.state.center.lat}\n          lng={this.state.center.lng}\n          image={imageSpace}\n        />\n      </GoogleMapReact>\n    );\n  }\n\n}\n\nexport default SimpleMap;","import React, { Component } from \"react\";\nimport GoogleMapReact from 'google-map-react';\n\n// const AnyReactComponent = ({ text }) => <div style={{\n//   color: 'white', \n//   background: 'grey',\n//   padding: '15px 10px',\n//   display: 'inline-flex',\n//   textAlign: 'center',\n//   alignItems: 'center',\n//   justifyContent: 'center',\n//   borderRadius: '100%',\n//   transform: 'translate(-50%, -50%)'\n// }}>{text}</div>;\n\nclass GetMarkerMap extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      center: {\n        lat: this.props.lat,\n        lng: this.props.lng,\n      },\n      zoom: this.props.zoom,\n    }\n  }\n\n  handleApiLoaded = (map, maps) => {\n    var marker = new maps.Marker({\n      position: this.state.center,\n      map: map,\n    })\n    marker.bindTo('position', map, 'center');\n\n    maps.event.addListener(map, 'dragend', function () {\n      // console.log(map.center.lat());\n\n      this.props.onMove(map.center.lat(), map.center.lng());\n    }.bind(this))\n\n    maps.event.addListener(map, 'zoom_changed', function () {\n\n      this.props.onMove(map.center.lat(), map.center.lng());\n    }.bind(this))\n\n  };\n\n  render() {\n    return (\n      // Important! Always set the container height explicitly\n      <GoogleMapReact\n        bootstrapURLKeys={{ key: process.env.REACT_APP_API_KEY }}\n        defaultCenter={this.state.center}\n        defaultZoom={this.state.zoom}\n\n\n        // 구글맵의 map, maps를 만지기 위한 코드 두줄. handleApiLoaded 함수에서 map과 maps를 이용할 수 있다!!\n        yesIWantToUseGoogleMapApiInternals={true}\n        onGoogleApiLoaded={({ map, maps }) => this.handleApiLoaded(map, maps)}\n      >\n      </GoogleMapReact>\n    );\n  }\n\n}\n\nexport default GetMarkerMap;","import React, { Component } from 'react';\r\nimport EXIF from 'exif-js'\r\nimport SimpleMap from './SimpleMap.js';\r\nimport GetMarkerMap from './GetMarkerMap.js';\r\n\r\nclass PostContent extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            file: null,\r\n            wtmX: null,\r\n            wtmY: null,\r\n            map: null,\r\n        }\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        var mapSpace = null;\r\n\r\n        var getMarkerMap = function () {\r\n            var initialCenter = {\r\n                lat: 36.01508134061981,\r\n                lng: 129.3225570661101,\r\n            }\r\n            this.setState({\r\n                wtmX: initialCenter.lat,\r\n                wtmY: initialCenter.lng,\r\n            })\r\n            mapSpace = <GetMarkerMap lat={initialCenter.lat} lng={initialCenter.lng} zoom={13} onMove={function (cLat, cLng) {\r\n                this.setState({\r\n                    wtmX: cLat,\r\n                    wtmY: cLng,\r\n                });\r\n            }.bind(this)}></GetMarkerMap>\r\n            this.setState({\r\n                map: mapSpace,\r\n            })\r\n        }.bind(this);\r\n\r\n        // 맵에 있는 마커의 위도, 경도 정보를 받아와서 this.state.wtmX 및 wtmY에 넣어주어야 함. setState 필수! -> Submit 버튼 클릭 시\r\n\r\n        var makingMap = function (_wtmX, _wtmY, _image) {\r\n            this.setState({\r\n                wtmX: _wtmX,\r\n                wtmY: _wtmY,\r\n            })\r\n\r\n\r\n            mapSpace = <SimpleMap lat={_wtmX} lng={_wtmY} zoom={11} image={_image}></SimpleMap>\r\n            this.setState({\r\n                map: mapSpace,\r\n            })\r\n\r\n            // 사진에서 위치 정보 받아와서 지도 구현\r\n\r\n            //*********** 구글 맵 google-map-react 이용\r\n            // https://github.com/google-map-react/google-map-react\r\n        }.bind(this);\r\n\r\n        return (\r\n            <div>\r\n                {/* 아래는 사진 EXIF 가져오기 위한 코드 두줄 */}\r\n                <script type=\"text/javascript\" src=\"https://cdn.jsdelivr.net/npm/exif-js\"></script>\r\n                <script src=\"vendors/exif-js/exif-js\"></script>\r\n                <form onSubmit={function (e) {\r\n                    e.preventDefault(); // 기존 onSubmit 기능 prevent => 새로고침 안되도록!\r\n\r\n                    var date = new Date();\r\n                    var curDate = date.toLocaleString();\r\n                    var postData = {\r\n                        title: e.target.title.value,\r\n                        content: e.target.content.value,\r\n                        image: this.state.file,\r\n                        id: this.props.user.userId,\r\n                        posted_date: curDate,\r\n                        pw: this.props.user.userPw,\r\n                        lat: this.state.wtmX,\r\n                        lng: this.state.wtmY,\r\n                    }\r\n\r\n                    console.log(\"this image's lat and lng is\", this.state.wtmX, this.state.wtmY);\r\n\r\n\r\n                    if (postData.title === \"\") {\r\n                        alert('제목을 입력하세요.')\r\n                    } else if (postData.content === \"\") {\r\n                        alert('내용을 입력해주세요.') // 나중에 내용 비어도 괜찮냐고 물어보는 confirm 띄우기\r\n                        // if(confirm){\r\n                        //     postDate.content=\"\";\r\n                        // }\r\n                    } else if (postData.image === \"\") {\r\n                        alert('사진이 없습니다.')\r\n                    } else {\r\n                        this.props.onSubmit(postData);\r\n                        alert('Posted');\r\n                    }\r\n                }.bind(this)}>\r\n                    <p>\r\n                        제목 : <input type=\"text\" name=\"title\" placeholder=\"제목\"></input>\r\n                    </p>\r\n                    {/* <p>\r\n                        작성자 : <input type=\"text\" name=\"id\" placeholder=\"작성자명\"></input>\r\n                    \r\n                        &nbsp; &nbsp; &nbsp; 비밀번호 : <input type=\"password\" name=\"pw\" placeholder=\"비밀번호\"></input>\r\n                    </p> */}\r\n                    <p>\r\n                        <textarea style={{ width: '500px', height: '200px' }}\r\n                            name=\"content\" placeholder=\"내용을 입력해주세요\"></textarea>\r\n                    </p>\r\n                    <p>\r\n                        사진을 선택해주세요 : <input type=\"file\" id=\"image\" name=\"image\" accept=\"image/*\" onChange={function (e) {\r\n                            var imageFile = e.target.files[0];\r\n                            this.setState({\r\n                                file: imageFile,\r\n                            })\r\n\r\n\r\n                            // 사진 미리보기 구현\r\n                            var reader = new FileReader();\r\n                            reader.onload = function (event) {\r\n                                var img = document.createElement(\"img\");\r\n                                img.setAttribute(\"src\", event.target.result);\r\n                                img.setAttribute(\"width\", 400); // 사진 미리보기 img 태그의 witdh 설정\r\n                                img.setAttribute(\"id\", \"thumbnailImg\"); // 사진 미리보기 img 태그의 id 설정\r\n                                document.querySelector(\"div#image_container\").appendChild(img);\r\n\r\n                                //사진 미리보기 구현은 끝\r\n\r\n\r\n\r\n                                // reader.onload 과정에서 이미지의 EXIF 정보도 불러와 사진을 찍은 위치(위도, 경도) 가져오기\r\n                                var tags = null;\r\n                                var _wtmX = null;\r\n                                var _wtmY = null;\r\n\r\n                                EXIF.getData(imageFile, () => {\r\n\r\n                                    tags = EXIF.getAllTags(imageFile);\r\n\r\n                                    var exifLong = tags.GPSLongitude;\r\n                                    var exifLat = tags.GPSLatitude;\r\n                                    var exifLongRef = tags.GPSLongitudeRef;\r\n                                    var exifLatRef = tags.GPSLatitudeRef;\r\n\r\n                                    var latitude = null;\r\n                                    var longitude = null;\r\n\r\n\r\n                                    if (exifLat != null && exifLong != null) {\r\n                                        if (exifLatRef === \"S\") {\r\n                                            latitude = (exifLat[0] * -1) + (((exifLat[1] * -60) + (exifLat[2] * -1)) / 3600);\r\n                                        } else {\r\n                                            latitude = exifLat[0] + (((exifLat[1] * 60) + exifLat[2]) / 3600);\r\n                                        }\r\n\r\n                                        if (exifLongRef === \"W\") {\r\n                                            longitude = (exifLong[0] * -1) + (((exifLong[1] * -60) + (exifLong[2] * -1)) / 3600);\r\n                                        } else {\r\n                                            longitude = exifLong[0] + (((exifLong[1] * 60) + exifLong[2]) / 3600);\r\n                                        }\r\n                                    } else {\r\n                                        getMarkerMap();\r\n                                        console.log(\"exif에서 위도 경도 얻을 수 없음\");\r\n                                    }\r\n\r\n\r\n                                    if (latitude != null && longitude != null) {\r\n                                        _wtmX = latitude;\r\n                                        _wtmY = longitude;\r\n                                        makingMap(_wtmX, _wtmY, imageFile); // map 만드는 함수 호춤\r\n                                    }\r\n\r\n                                    // 객체 내용 확인\r\n                                    // console.log(tags);\r\n                                    // 메타데이터 값 확인\r\n                                    // console.log(tags.Artist);\r\n                                    // console.log(tags.Orientation);\r\n                                    // // 모든 키와 해당 키의 값 얻기\r\n                                    // for( let key in tags) {\r\n                                    //     console.log(key);\r\n                                    //     console.log(tags[key]);\r\n                                    // }\r\n\r\n\r\n\r\n                                });\r\n\r\n\r\n\r\n\r\n                            };\r\n                            reader.readAsDataURL(e.target.files[0]);\r\n\r\n                        }.bind(this)}></input>\r\n                    </p>\r\n                    <p>\r\n                        <input type=\"submit\" value=\"Post\"></input>\r\n                    </p>\r\n                    <p>사진 미리보기</p>\r\n                    <div id=\"image_container\"></div>\r\n                    <div id=\"single_map\" style={{ width: '100%', height: '400px' }}>{this.state.map}</div>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PostContent;","export default __webpack_public_path__ + \"static/media/sample.502a4402.jpg\";","import React, { Component } from 'react';\r\nimport sample from './image/sample.jpg';\r\n\r\n\r\nclass ReadContent extends Component {\r\n\r\n    checkUser(cUserId, cUserPw) {\r\n        return (cUserId === this.props.user.userId && cUserPw === this.props.user.userPw) ? true : false;\r\n    }\r\n\r\n    render() {\r\n        var _contents = this.props.contents;\r\n        var viewContent = null;\r\n\r\n        var URL = window.URL || window.wedkitURL; //\r\n\r\n        var imageSpace = \"\";\r\n\r\n        var imgURL = null;\r\n\r\n        var curColor = 'lightcoral';\r\n\r\n        viewContent = _contents.map(function (element) {\r\n            if (element.image != null) {\r\n\r\n                imgURL = URL.createObjectURL(element.image); //createObjectURL은 parameter로 blob만 받는다, element.image는 blob\r\n\r\n                imageSpace = <img src={imgURL} alt=\"게시물 이미지\" width=\"150\" />\r\n            } else {\r\n                // imageSpace=\"**이미지가 없는 게시물입니다.**\"\r\n                imageSpace = <img src={sample} alt=\"오설록 사진\" width=\"150\" />\r\n            }\r\n\r\n\r\n            switch (element.num % 2) {\r\n                case 1:\r\n                    curColor = '#e8e7e3';\r\n                    break;\r\n                default:\r\n                    curColor = '#cbd3bd';\r\n            }\r\n\r\n            return (\r\n                <div id=\"posting\" key={element.num} style={{ backgroundColor: curColor, cursor: 'pointer' }}\r\n                    onClick={function (e) {\r\n                        e.preventDefault();\r\n                        this.props.onClickOne(element);\r\n                    }.bind(this)}>\r\n                    <div>\r\n                        <div style={{ display: 'flex', alignContent: 'center' }}>\r\n                            <div style={{ flex: 3, padding: '20px' }}>\r\n                                <div align=\"left\">#{element.num}</div>\r\n                                <div align=\"right\">{element.id}</div>\r\n                                <div align=\"left\" style={{ fontSize: \"24px\" }}>{element.title}</div>\r\n                                <div align=\"right\">작성일 : {element.posted_date}</div>\r\n                                <span style={{ float: \"right\" }}>\r\n                                    <button className=\"buttons\" onClick={function (e) {\r\n                                        e.preventDefault();\r\n                                        if (this.props.user === null) {\r\n                                            alert(\"로그인 후 이용해주세요.\");\r\n                                            this.props.onSetLogin();\r\n                                        } else {\r\n                                            if (this.checkUser(element.id, element.pw)) {\r\n                                                this.props.onEdit(element);\r\n                                            } else {\r\n                                                alert(\"다른 사용자가 작성한 게시물입니다.\")\r\n                                            }\r\n                                        }\r\n\r\n                                    }.bind(this)}>수정</button>\r\n                                    <button className=\"buttons\" onClick={function (e) {\r\n                                        e.preventDefault();\r\n                                        if (this.props.user === null) {\r\n                                            alert(\"로그인 후 이용해주세요.\");\r\n                                            this.props.onSetLogin();\r\n                                        } else {\r\n                                            if (this.checkUser(element.id, element.pw)) {\r\n                                                var checkDelete = window.confirm(\"정말 삭제하시겠습니까?\");\r\n                                                if (checkDelete) {\r\n                                                    this.props.onDelete(element);\r\n                                                    alert(element.num + \"번 게시물이 삭제되었습니다.\");\r\n                                                }\r\n                                            } else {\r\n                                                alert(\"다른 사용자가 작성한 게시물입니다.\")\r\n                                            }\r\n                                        }\r\n                                    }.bind(this)}>삭제</button>\r\n                                </span>\r\n                            </div>\r\n                            <div style={{ flex: 1, display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\r\n                                {imageSpace}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        }.bind(this)\r\n        );\r\n\r\n\r\n\r\n        return (\r\n            <div id=\"postingContainer\">\r\n                {viewContent}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ReadContent;","export default __webpack_public_path__ + \"static/media/backButton.70edc1e3.png\";","export default __webpack_public_path__ + \"static/media/postButton.9f5a07cf.png\";","import React, { Component } from 'react';\nimport GoogleMapReact from 'google-map-react';\nimport sample from './image/sample.jpg';\n\nconst Marker = ({ image }) => <div className=\"markers\" style={{\n    color: 'white',\n    background: '#455d3e',\n    padding: '10px 10px',\n    display: 'inline-flex',\n    textAlign: 'center',\n    alignItems: 'center',\n    justifyContent: 'center',\n    borderRadius: '15%',\n    transform: 'translate(-50%, -50%)',\n\n    width: '60px',\n    height: '60px',\n    overflow: 'hidden',\n    margin: '0 auto',\n    transition: '400ms ease all',\n}} onMouseEnter={function (e) {\n    e.target.style.width = '200px';\n    e.target.style.height = '200px';\n    e.target.style.padding = '30px 30px';\n}} onMouseLeave={function (e) {\n    e.target.style.width = '60px';\n    e.target.style.height = '60px';\n    e.target.style.padding = '15px 15px';\n}}>{image}</div>;\n\nclass MapReadContent extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            center: {\n                lat: this.props.lat,\n                lng: this.props.lng,\n            },\n            zoom: this.props.zoom,\n        }\n    }\n\n\n    // handleApiLoaded = (map, maps) => {\n    //     var marker = new maps.Marker({\n    //       position: this.state.center,\n    //       map: map,\n    //     })\n\n    // };\n\n    render() {\n        console.log(\"하이\", process.env.REACT_APP_API_KEY);\n\n        var _contents = this.props.contents;\n        var markers = null;\n\n        // 구글 맵 불러오기?\n\n\n\n\n\n        var URL = window.URL || window.wedkitURL;\n        var imageSpace = \"\";\n        var imgURL = null;\n\n        markers = _contents.map(function (element) {\n            if (element.image != null) {\n\n\n                imgURL = URL.createObjectURL(element.image); //createObjectURL은 parameter로 blob만 받는다, element.image는 blob\n\n                imageSpace = <img src={imgURL} alt=\"게시물 이미지\" style={{\n                    width: '100%',\n                    height: '100%',\n                    borderRadius: '15%',\n                    objectFit: 'cover',\n                }} />\n            } else {\n                imageSpace = <img src={sample} alt=\"오설록 사진\" style={{\n                    width: '100%',\n                    height: '100%',\n                    borderRadius: '15%',\n                    objectFit: 'cover',\n                }} />\n            }\n\n            return (\n                <Marker\n                    lat={element.lat}\n                    lng={element.lng}\n                    image={imageSpace}\n                    key={element.num}\n                />\n            );\n        });\n\n\n\n        return (\n            <div id=\"single_map\" style={{ width: '100%', height: '750px' }}>\n\n                {/* Important! Always set the container height explicitly */}\n                <GoogleMapReact\n                    bootstrapURLKeys={{ key: process.env.REACT_APP_API_KEY }}\n                    defaultCenter={this.state.center}\n                    defaultZoom={this.state.zoom}\n\n                // 구글맵의 map, maps를 만지기 위한 코드 두줄. handleApiLoaded 함수에서 map과 maps를 이용할 수 있다!!\n                // yesIWantToUseGoogleMapApiInternals={true}\n                // onGoogleApiLoaded={({ map, maps }) => this.handleApiLoaded(map, maps)}\n                >\n                    {markers}\n                </GoogleMapReact>\n            </div>\n        );\n    }\n}\n\nexport default MapReadContent;","import React, { Component } from 'react';\nimport GetMarkerMap from './GetMarkerMap.js';\nimport sample from './image/sample.jpg';\n\n\nclass EditContent extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            file: this.props.content.image,\n            wtmX: this.props.content.lat,\n            wtmY: this.props.content.lng,\n        }\n    }\n\n\n\n    render() {\n        var mapSpace = null;\n        mapSpace = <GetMarkerMap lat={this.props.content.lat} lng={this.props.content.lng} zoom={13} onMove={function (cLat, cLng) {\n            this.setState({\n                wtmX: cLat,\n                wtmY: cLng,\n            });\n        }.bind(this)}></GetMarkerMap>\n\n        // 맵에 있는 마커의 위도, 경도 정보를 받아와서 this.state.wtmX 및 wtmY에 넣어주어야 함. setState 필수! -> Submit 버튼 클릭 시\n\n\n        var URL = window.URL || window.wedkitURL; //\n        var imageSpace = \"\";\n        var imgURL = null;\n        if (this.props.content.image != null) {\n\n            imgURL = URL.createObjectURL(this.props.content.image); //createObjectURL은 parameter로 blob만 받는다, element.image는 blob\n\n            imageSpace = <img src={imgURL} alt=\"게시물 이미지\" width=\"400\" />\n        } else {\n            // imageSpace=\"**이미지가 없는 게시물입니다.**\"\n            imageSpace = <img src={sample} alt=\"오설록 사진\" width=\"400\" />\n        }\n\n\n        var initTitle = this.props.content.title;\n        var initTextarea = this.props.content.content;\n\n\n        return (\n            <div>\n                <form onSubmit={function (e) {\n                    e.preventDefault(); // 기존 onSubmit 기능 prevent => 새로고침 안되도록!\n\n                    // var date = new Date();\n                    // var curDate = date.toLocaleString();\n                    // 나중에 수정일도 추가할까 생각 중\n                    var editedData = {\n                        title: e.target.title.value,\n                        content: e.target.content.value,\n                        image: this.props.content.image,\n                        id: this.props.content.id,\n                        posted_date: this.props.content.posted_date,\n                        pw: this.props.content.pw,\n                        lat: this.state.wtmX,\n                        lng: this.state.wtmY,\n                        key: this.props.content.key,\n                        num: this.props.content.num,\n                    }\n\n                    console.log(\"this image's lat and lng is\", this.state.wtmX, this.state.wtmY);\n\n\n                    if (editedData.title === \"\") {\n                        alert('제목을 입력해주세요.')\n                    } else if (editedData.content === \"\") {\n                        alert('내용을 입력해주세요.') // 나중에 내용 비어도 괜찮냐고 물어보는 confirm 띄우기\n                        // if(confirm){\n                        //     postDate.content=\"\";\n                        // }\n                    } else if (editedData.image === \"\") {\n                        alert('사진이 없습니다.')\n                    } else {\n                        this.props.onSubmit(editedData);\n                        alert('Edited');\n                    }\n                }.bind(this)}>\n                    <p>\n                        제목 : <input type=\"text\" name=\"title\" placeholder=\"제목\" defaultValue={initTitle}></input>\n                    </p>\n                    {/* <p>\n                        작성자 : <input type=\"text\" name=\"id\" placeholder=\"작성자명\" value={this.props.content.id}></input>\n\n                        &nbsp; &nbsp; &nbsp; 비밀번호 : <input type=\"password\" name=\"pw\" placeholder=\"비밀번호\" value={this.props.content.pw}></input>\n                    </p> */}\n                    <p>\n                        <textarea style={{ width: '500px', height: '200px' }}\n                            name=\"content\" placeholder=\"내용을 입력해주세요\" defaultValue={initTextarea}></textarea>\n                    </p>\n                    <p>\n                        <input type=\"submit\" value=\"Edit\"></input>\n                    </p>\n                    <p>사진 미리보기</p>\n                    <div id=\"image_container\">{imageSpace}</div>\n                    <div id=\"single_map\" style={{ width: '100%', height: '400px' }}>{mapSpace}</div>\n                </form>\n            </div>\n        );\n    }\n}\n\nexport default EditContent;","import React, { Component } from 'react';\n\nclass Clock extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            date: new Date(),\n        }\n    }\n\n    componentDidMount() {\n        this.timerId = setInterval(this.setCurTime, 1000);\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.timerId);\n    }\n\n    setCurTime = () => {\n        this.setState({\n            date: new Date(),\n        })\n    }\n\n    render() {\n        var curTime = this.state.date.toLocaleTimeString();\n        return (\n            <div>\n                {curTime}\n            </div>\n        );\n    }\n\n}\n\nexport default Clock;","import React, { Component } from 'react';\n\nclass Login extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                <form onSubmit={function (e) {\n                    e.preventDefault();\n                    var userData = {\n                        userId: e.target.id.value,\n                        userPw: e.target.pw.value,\n                    }\n\n                    if (userData.userId === \"\") {\n                        alert('아이디를 입력해주세요.')\n                    } else if (userData.userPw === \"\") {\n                        alert('비밀번호를 입력해주세요.')\n                    } else {\n                        this.props.onLogin(userData);\n                    }\n                }.bind(this)}>\n                    <div>\n                        <p>\n                            ID <input type=\"text\" name=\"id\" placeholder=\"아이디\"></input>\n                        </p>\n                        <p>\n                            비밀번호 <input type=\"password\" name=\"pw\" placeholder=\"비밀번호\"></input>\n                        </p>\n                    </div>\n                    <div>\n                        <input type=\"submit\" value=\"로그인\"></input>\n                    </div>\n\n                </form>\n            </div>\n        );\n    }\n}\n\nexport default Login;","import React, { Component } from 'react';\nimport sample from './image/sample.jpg';\n\nclass BigPosting extends Component {\n\n    checkUser(cUserId, cUserPw) {\n        return (cUserId === this.props.user.userId && cUserPw === this.props.user.userPw) ? true : false;\n    }\n\n    render() {\n        var URL = window.URL || window.wedkitURL; //\n        var imageSpace = \"\";\n        var imgURL = null;\n\n        var element = this.props.posting;\n\n        if (element === null || element === undefined) {\n            console.log(element);\n            return (\n                <div>\n\n                </div>\n            );\n        } else {\n            if (element.image != null) {\n\n                imgURL = URL.createObjectURL(element.image); //createObjectURL은 parameter로 blob만 받는다, element.image는 blob\n\n                imageSpace = <img src={imgURL} alt=\"게시물 이미지\" width=\"400\" />\n            } else {\n                // imageSpace=\"**이미지가 없는 게시물입니다.**\"\n                imageSpace = <img src={sample} alt=\"오설록 사진\" width=\"400\" />\n            }\n        }\n\n\n        // var curColor = null;\n        // switch (element.num % 2) {\n        //     case 1:\n        //         curColor = '#e8e7e3';\n        //         break;\n        //     default:\n        //         curColor = '#cbd3bd';\n        // }\n\n        return (\n            <div style={{ textAlign: 'center', padding: '20px' }}>\n                <div style={{ width: '400px', display: 'inline-block' }}>\n                    <p align=\"left\">#{element.num}</p>\n                    <h2 align=\"left\">{element.title}</h2>\n                    <p align=\"right\">{element.id} </p>\n                    <p>{element.content}</p>\n                    {imageSpace}\n                    <p>작성일 : {element.posted_date}</p>\n                    <span style={{ float: \"right\" }}>\n                        <button className=\"buttons\" onClick={function (e) {\n                            e.preventDefault();\n                            if (this.props.user === null) {\n                                alert(\"로그인 후 이용해주세요.\");\n                                this.props.onSetLogin();\n                            } else {\n                                if (this.checkUser(element.id, element.pw)) {\n                                    this.props.onEdit(element);\n                                } else {\n                                    alert(\"다른 사용자가 작성한 게시물입니다.\")\n                                }\n                            }\n\n                        }.bind(this)}>수정</button>\n                        <button className=\"buttons\" onClick={function (e) {\n                            e.preventDefault();\n                            if (this.props.user === null) {\n                                alert(\"로그인 후 이용해주세요.\");\n                                this.props.onSetLogin();\n                            } else {\n                                if (this.checkUser(element.id, element.pw)) {\n                                    var checkDelete = window.confirm(\"정말 삭제하시겠습니까?\");\n                                    if (checkDelete) {\n                                        this.props.onDelete(element);\n                                        alert(element.num + \"번 게시물이 삭제되었습니다.\");\n                                    }\n                                } else {\n                                    alert(\"다른 사용자가 작성한 게시물입니다.\")\n                                }\n                            }\n                        }.bind(this)}>삭제</button>\n                    </span>\n                </div>\n            </div>\n        );\n\n    }\n}\n\nexport default BigPosting;","import React, { Component } from 'react';\nimport './App.css';\nimport PostContent from './PostContent';\nimport ReadContent from './ReadContent';\nimport backButton from './image/backButton.png';\nimport postButton from './image/postButton.png';\nimport MapReadContent from './MapReadContent';\nimport EditContent from './EditContent';\nimport Clock from './Clock';\nimport Login from './Login';\nimport BigPosting from './BigPosting';\n\n// import sample from './image/sample.jpg';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      mode: 'read', // read or post\n      readMode: 'board', // board or map\n      contents: [\n        { key: 1, title: '오설록에서', content: '이곳은 오설록입니다.', image: null, id: '상윤', posted_date: '2021.07.31 오후 7:29:54', pw: '1234', num: 1, lat: 33.30627777777778, lng: 126.28868888888888 },\n      ],\n      curNum: 2,\n      dataToEdit: null,\n      user: null,\n      bigPosting: null,\n      bigColor: '#e8e7e3',\n    }\n  }\n\n  userHandler() {\n\n    var curUser = null;\n\n\n    const style = {\n      \"display\": \"flex\",\n      \"align-items\": \"flex-start\",\n      \"justify-content\": \"flex-end\"\n    };\n\n    const IdStyle = {\n      \"display\": \"flex\",\n      \"align-items\": \"center\",\n      \"justify-content\": \"center\"\n    };\n\n    if (this.state.user === null) {\n      curUser = <button className=\"login\" onClick={function () {\n        this.setState({\n          mode: 'login',\n        })\n      }.bind(this)}>로그인</button>\n    } else {\n      curUser =\n        <div style={style}>\n          <div style={IdStyle} id=\"userName\">ID: {this.state.user.userId}</div>\n          <button className=\"login\" onClick={function () {\n            this.setState({\n              user: null,\n            })\n          }.bind(this)}>로그아웃</button>\n        </div>\n    }\n\n    return curUser;\n  }\n\n  modeHandler() {\n    var curMode = null;\n    if (this.state.mode === 'read') {\n      if (this.state.readMode === 'board') {\n        curMode =\n          <div className=\"container\">\n            <div className=\"items\" id=\"bigPosting\" style={{ backgroundColor: this.state.bigColor }}>\n              <BigPosting posting={this.state.bigPosting} user={this.state.user}\n                onSetLogin={function () {\n                  this.setState({\n                    mode: 'login',\n                  })\n                }.bind(this)}\n                onEdit={function (dataToEdit) {\n                  this.setState({\n                    mode: 'edit',\n                    dataToEdit: dataToEdit,\n                  })\n                }.bind(this)}\n                onDelete={function (dataToDelete) {\n                  var _contents = [...this.state.contents]\n                  var deletedIndex = (this.state.curNum) - 1 - dataToDelete.num;\n                  _contents.splice(deletedIndex, 1);\n                  _contents.map(function (element, index) {\n                    element.num = this.state.curNum - 2 - index;\n                    element.key = this.state.curNum - 2 - index;\n                  }.bind(this))\n\n                  if (this.state.bigPosting.num === dataToDelete.num) {\n                    this.setState({\n                      mode: 'read',\n                      contents: _contents,\n                      curNum: this.state.curNum - 1,\n                      bigPosting: null,\n                    })\n                  } else {\n                    this.setState({\n                      mode: 'read',\n                      contents: _contents,\n                      curNum: this.state.curNum - 1,\n                    })\n                  }\n                }.bind(this)}></BigPosting>\n            </div>\n            <div className=\"items\" id=\"postings\">\n              <ReadContent user={this.state.user} contents={this.state.contents}\n                onSetLogin={function () {\n                  this.setState({\n                    mode: 'login',\n                  })\n                }.bind(this)}\n                onClickOne={function (dataToBig) {\n                  var curColor = null;\n                  switch (dataToBig.num % 2) {\n                    case 1:\n                      curColor = '#e8e7e3';\n                      break;\n                    default:\n                      curColor = '#cbd3bd';\n                  }\n                  this.setState({\n                    bigPosting: dataToBig,\n                    bigColor: curColor,\n                  })\n                }.bind(this)}\n                onEdit={function (dataToEdit) {\n                  this.setState({\n                    mode: 'edit',\n                    dataToEdit: dataToEdit,\n                  })\n                }.bind(this)}\n                onDelete={function (dataToDelete) {\n                  var _contents = [...this.state.contents]\n                  var deletedIndex = (this.state.curNum) - 1 - dataToDelete.num;\n                  _contents.splice(deletedIndex, 1);\n                  _contents.map(function (element, index) {\n                    element.num = this.state.curNum - 2 - index;\n                    element.key = this.state.curNum - 2 - index;\n                  }.bind(this))\n\n                  if (this.state.bigPosting.num === dataToDelete.num) {\n                    this.setState({\n                      mode: 'read',\n                      contents: _contents,\n                      curNum: this.state.curNum - 1,\n                      bigPosting: null,\n                    })\n                  } else {\n                    this.setState({\n                      mode: 'read',\n                      contents: _contents,\n                      curNum: this.state.curNum - 1,\n                    })\n                  }\n                }.bind(this)}></ReadContent>\n            </div>\n          </div>\n      } else if (this.state.readMode === 'map') {\n        curMode = <MapReadContent contents={this.state.contents} lat={33.30627777777778} lng={126.28868888888888} zoom={10}></MapReadContent>\n      }\n    } else if (this.state.mode === 'post') {\n      curMode = <PostContent user={this.state.user} onSubmit={function (postData) {\n        var _contents = [{\n          key: this.state.curNum,\n          title: postData.title,\n          content: postData.content,\n          image: postData.image,\n          id: postData.id,\n          posted_date: postData.posted_date,\n          pw: postData.pw,\n          num: this.state.curNum,\n          lat: postData.lat,\n          lng: postData.lng,\n        }, ...this.state.contents]\n        var nextNum = this.state.curNum + 1;\n        this.setState({\n          mode: 'read',\n          contents: _contents,\n          curNum: nextNum,\n        })\n      }.bind(this)}></PostContent>\n    } else if (this.state.mode === 'edit') {\n      curMode = <EditContent content={this.state.dataToEdit} onSubmit={function (editedData) {\n        var _contents = [...this.state.contents]\n        _contents[(this.state.curNum) - 1 - editedData.num] = editedData;\n        this.setState({\n          mode: 'read',\n          contents: _contents,\n        })\n\n        if (this.state.bigPosting.num === editedData.num) {\n          this.setState({\n            bigPosting: editedData,\n          })\n        }\n      }.bind(this)}></EditContent>\n    } else if (this.state.mode === 'login') {\n      curMode = <Login onLogin={function (userData) {\n        this.setState({\n          mode: 'read',\n          user: userData,\n        })\n      }.bind(this)}></Login>\n    }\n    return curMode;\n  }\n\n  render() {\n    var buttonImg = \"버튼이미지\";\n    var selectSpace = null;\n    if (this.state.mode === 'read') {\n      buttonImg = <img src={postButton} alt=\"post버튼\" width=\"30\" />\n      selectSpace =\n        <select defaultValue=\"Board\"\n          name=\"selectReadMode\"\n          id=\"selectReadMode\"\n          onChange={function (e) {\n            e.preventDefault();\n            if (e.target.value === \"Board\") {\n              this.setState({\n                readMode: \"board\",\n              })\n            } else if (e.target.value === \"Map\") {\n              this.setState({\n                readMode: \"map\",\n              })\n            }\n            console.log(e.target.value);\n          }.bind(this)}>\n          <option value=\"Board\">게시물</option>\n          <option value=\"Map\">지도</option>\n        </select>\n    } else if (this.state.mode === 'post' || this.state.mode === 'edit' || this.state.mode === 'login') {\n      buttonImg = <img src={backButton} alt=\"back버튼\" width=\"30\" />\n      selectSpace = null;\n    }\n\n    if (this.state.contents[0] !== null && this.state.bigPosting === null) {\n      this.setState({\n        bigPosting: this.state.contents[0],\n      })\n    }\n\n\n\n\n    return (\n      <div className=\"App\">\n        <div style={{ padding: '10px' }}>\n          <Clock></Clock>\n        </div>\n        <h1 style={{ backgroundColor: '#cbd3bd', padding: '10px', margin: 0 }}>Gallery</h1>\n        <div align='right' style={{ paddingRight: '20px', paddingTop: '10px' }}>{this.userHandler()}</div>\n        <div>\n          <button id=\"postButton\" onClick={function (e) {\n            e.preventDefault();\n            if (this.state.mode === 'read') {\n              if (this.state.user === null) {\n                alert(\"로그인 후 이용해주세요.\");\n                this.setState({\n                  mode: 'login'\n                })\n              } else {\n                this.setState({\n                  mode: 'post'\n                });\n              }\n            } else {\n              this.setState({\n                mode: 'read'\n              });\n            }\n          }.bind(this)}>{buttonImg}</button>\n        </div>\n        <div align='right' style={{ paddingRight: '20px', paddingBottom: '10px' }}>\n          {selectSpace}\n        </div>\n        {this.modeHandler()}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}